{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Docs","title":"Home"},{"location":"#docs","text":"","title":"Docs"},{"location":"Home/","text":"","title":"Home"},{"location":"Modules/UniLinearRegression/","text":"Univariate Linear Regression class Parameters: Name Type Description Default epoch int The number of epochs. required learning_rate float The learning rate of the algorithm. 0.0001 random_seed int A seed for the initialization of weights. 42 Returns: Name Type Description None none None Source code in mlfromscratch\\src\\supervised_learning\\UniLinearRegression.py 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 class UniLinearRegression : \"\"\" Univariate Linear Regression class Parameters: epoch (int): The number of epochs. learning_rate (float): The learning rate of the algorithm. random_seed (int): A seed for the initialization of weights. Returns: None (none): None \"\"\" def __init__ ( self , epochs = 100 , learning_rate = 0.0001 , random_seed = 42 ): self . epochs = epochs self . lr = learning_rate self . a , self . b = self . initialize ( random_seed ) self . a_history = [] self . b_history = [] def initialize ( self , seed ): \"\"\" Method that initializes the weights to random values. \"\"\" np . random . seed ( seed ) a = np . random . random () b = np . random . random () return a , b def predict ( self , x ): \"\"\" Method that makes predictions for a number of points. \"\"\" return self . a * x + self . b def cost ( self , x , y ): \"\"\" Method that calculates the cost of the prediction (MSE). \"\"\" y_hat = self . predict ( x ) return sum ((( y - y_hat ) ** 2 )) / len ( y ) def update ( self , x , y ): \"\"\" Method that runs one iteration of gradient descent and updates the class' weights \"\"\" y_hat = self . predict ( x ) da = - ( 2 / len ( x )) * sum ( x * ( y - y_hat )) db = - ( 2 / len ( x )) * sum ( y - y_hat ) self . a -= ( self . lr * da ) self . b -= ( self . lr * db ) return None def fit ( self , x , y ): \"\"\" Method that handles the whole training procedure. \"\"\" for ep in range ( self . epochs ): self . a_history . append ( self . a ) self . b_history . append ( self . b ) self . update ( x , y ) return None cost ( x , y ) Method that calculates the cost of the prediction (MSE). Source code in mlfromscratch\\src\\supervised_learning\\UniLinearRegression.py 39 40 41 42 43 44 def cost ( self , x , y ): \"\"\" Method that calculates the cost of the prediction (MSE). \"\"\" y_hat = self . predict ( x ) return sum ((( y - y_hat ) ** 2 )) / len ( y ) fit ( x , y ) Method that handles the whole training procedure. Source code in mlfromscratch\\src\\supervised_learning\\UniLinearRegression.py 59 60 61 62 63 64 65 66 67 68 def fit ( self , x , y ): \"\"\" Method that handles the whole training procedure. \"\"\" for ep in range ( self . epochs ): self . a_history . append ( self . a ) self . b_history . append ( self . b ) self . update ( x , y ) return None initialize ( seed ) Method that initializes the weights to random values. Source code in mlfromscratch\\src\\supervised_learning\\UniLinearRegression.py 24 25 26 27 28 29 30 31 def initialize ( self , seed ): \"\"\" Method that initializes the weights to random values. \"\"\" np . random . seed ( seed ) a = np . random . random () b = np . random . random () return a , b predict ( x ) Method that makes predictions for a number of points. Source code in mlfromscratch\\src\\supervised_learning\\UniLinearRegression.py 33 34 35 36 37 def predict ( self , x ): \"\"\" Method that makes predictions for a number of points. \"\"\" return self . a * x + self . b update ( x , y ) Method that runs one iteration of gradient descent and updates the class' weights Source code in mlfromscratch\\src\\supervised_learning\\UniLinearRegression.py 46 47 48 49 50 51 52 53 54 55 56 57 def update ( self , x , y ): \"\"\" Method that runs one iteration of gradient descent and updates the class' weights \"\"\" y_hat = self . predict ( x ) da = - ( 2 / len ( x )) * sum ( x * ( y - y_hat )) db = - ( 2 / len ( x )) * sum ( y - y_hat ) self . a -= ( self . lr * da ) self . b -= ( self . lr * db ) return None","title":"UniLinearRegression"},{"location":"Modules/UniLinearRegression/#mlfromscratch.src.supervised_learning.UniLinearRegression.UniLinearRegression.cost","text":"Method that calculates the cost of the prediction (MSE). Source code in mlfromscratch\\src\\supervised_learning\\UniLinearRegression.py 39 40 41 42 43 44 def cost ( self , x , y ): \"\"\" Method that calculates the cost of the prediction (MSE). \"\"\" y_hat = self . predict ( x ) return sum ((( y - y_hat ) ** 2 )) / len ( y )","title":"cost()"},{"location":"Modules/UniLinearRegression/#mlfromscratch.src.supervised_learning.UniLinearRegression.UniLinearRegression.fit","text":"Method that handles the whole training procedure. Source code in mlfromscratch\\src\\supervised_learning\\UniLinearRegression.py 59 60 61 62 63 64 65 66 67 68 def fit ( self , x , y ): \"\"\" Method that handles the whole training procedure. \"\"\" for ep in range ( self . epochs ): self . a_history . append ( self . a ) self . b_history . append ( self . b ) self . update ( x , y ) return None","title":"fit()"},{"location":"Modules/UniLinearRegression/#mlfromscratch.src.supervised_learning.UniLinearRegression.UniLinearRegression.initialize","text":"Method that initializes the weights to random values. Source code in mlfromscratch\\src\\supervised_learning\\UniLinearRegression.py 24 25 26 27 28 29 30 31 def initialize ( self , seed ): \"\"\" Method that initializes the weights to random values. \"\"\" np . random . seed ( seed ) a = np . random . random () b = np . random . random () return a , b","title":"initialize()"},{"location":"Modules/UniLinearRegression/#mlfromscratch.src.supervised_learning.UniLinearRegression.UniLinearRegression.predict","text":"Method that makes predictions for a number of points. Source code in mlfromscratch\\src\\supervised_learning\\UniLinearRegression.py 33 34 35 36 37 def predict ( self , x ): \"\"\" Method that makes predictions for a number of points. \"\"\" return self . a * x + self . b","title":"predict()"},{"location":"Modules/UniLinearRegression/#mlfromscratch.src.supervised_learning.UniLinearRegression.UniLinearRegression.update","text":"Method that runs one iteration of gradient descent and updates the class' weights Source code in mlfromscratch\\src\\supervised_learning\\UniLinearRegression.py 46 47 48 49 50 51 52 53 54 55 56 57 def update ( self , x , y ): \"\"\" Method that runs one iteration of gradient descent and updates the class' weights \"\"\" y_hat = self . predict ( x ) da = - ( 2 / len ( x )) * sum ( x * ( y - y_hat )) db = - ( 2 / len ( x )) * sum ( y - y_hat ) self . a -= ( self . lr * da ) self . b -= ( self . lr * db ) return None","title":"update()"}]}